{"code": "def build_balance_query(network, start_block, balance_end, diff=1):\n    import random\n    total_blocks = balance_end - start_block\n    part_size = total_blocks // 8\n    range_clauses = []\n\n    for i in range(8):\n        part_start = start_block + i * part_size\n        if i == 7:\n            part_end = balance_end\n        else:\n            part_end = start_block + (i + 1) * part_size - 1\n\n        if (part_end - part_start) > diff:\n            sub_range_start = random.randint(part_start, part_end - diff)\n        else:\n            sub_range_start = part_start\n\n        sub_range_end = sub_range_start + diff\n        range_clauses.append(f\"SELECT generate_series({sub_range_start}, {sub_range_end}) AS block\")\n\n    combined_ranges = \" UNION ALL \".join(range_clauses)\n\n    final_query = f\"\"\"\n    WITH block_heights AS (\n        {combined_ranges}\n    )\n    SELECT SUM(block) \n    FROM balance_changes \n    WHERE block IN (SELECT block FROM block_heights)\n    \"\"\"\n    query = final_query.strip()\n    return query\n\nquery = build_balance_query(network, start_block, balance_end, 1)"}