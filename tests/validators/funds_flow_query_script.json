{"code": "def build_funds_flow_query(network, start_block, end_block, diff=1):\n    import random\n    total_blocks = end_block - start_block\n    part_size = total_blocks // 8\n    range_clauses = []\n    for i in range(8):\n        part_start = start_block + i * part_size\n        if i == 7:\n            part_end = end_block\n        else:\n            part_end = start_block + (i + 1) * part_size - 1\n        if (part_end - part_start) > diff:\n            sub_range_start = random.randint(part_start, part_end - diff)\n        else:\n            sub_range_start = part_start\n        sub_range_end = sub_range_start + diff\n        range_clauses.append(f\"range({sub_range_start}, {sub_range_end})\")\n    combined_ranges = \" + \".join(range_clauses)\n    final_query = f\"\"\"\n    WITH {combined_ranges} AS block_heights\n    UNWIND block_heights AS block_height\n    MATCH p=(sender:Address)-[sent1:SENT]->(t:Transaction)-[sent2:SENT]->(receiver:Address)\n    WHERE t.block_height = block_height\n    WITH project(p) AS subgraph\n    CALL pagerank.get(subgraph) YIELD node, rank\n    RETURN round(rank * 1000000) / 1000000 AS roundedRank \n    ORDER BY roundedRank DESC\n    LIMIT 1\n    \"\"\"\n    query = final_query.strip()\n    return query\n\nquery = build_funds_flow_query(network, start_block, end_block, 1)"}